}
# Create Shiny app ----
shinyApp(ui, server)
library(shiny)
getPrediction <- function(ptest) {
pred <- unlist(strsplit(ptest,";"))
for (i in 1:length(pred)) {
eval(parse(text = pred[i]))
}
eval(parse(text = pred[length(pred)]))
}
# Define UI for random distribution app ----
ui <- fluidPage(
# App title ----
titlePanel("Tabsets"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
textAreaInput("caption", "Caption", "Enter a query", width = "250px",height = "500px"),
actionButton("actionButton", label = "Submit")
),
# Main panel for displaying outputs ----
mainPanel(
tags$style(type = 'text/css',
"footer{position: absolute; bottom:5%; left: 33%; padding:5px;}"
),
# Output: Tabset w/ plot, summary, and table ----
tabsetPanel(type = "tabs",
tabPanel("Plot", plotOutput("plot"))
)
)
)
)
# Define server logic for random distribution app ----
server <- function(input, output) {
# Reactive expression to generate the requested distribution ----
# This is called whenever the inputs change. The output functions
# defined below then use the value computed from this expression
caption <- eventReactive(input$actionButton,{
req(input$caption)
getPrediction(input$caption)
})
# Generate a plot of the data ----
# Also uses the inputs to build the plot label. Note that the
# dependencies on the inputs and the data reactive expression are
# both tracked, and all expressions are called in the sequence
# implied by the dependency graph.
output$plot <- renderPlot({
hist(rnorm(as.numeric(caption)))
})
}
# Create Shiny app ----
shinyApp(ui, server)
library(shiny)
#ui.R
library(shiny)
shinyUI(fluidPage(
titlePanel("Shiny App"),
sidebarLayout(
sidebarPanel(h2("Menu"),
mainPanel(h1("Main"),
tabPanel("Differential Expression",
column(6,
p("Input your gene of interest below"),
textInput("input$GeneVariable"), label = h4("Gene of interest"),
value = "Gjb2"),
submitButton("Submit")),
plotOutput("plot2"),
)
)
))
#server.R
shinyServer(function(input, output) {
output$plot2 <- renderPlot({
scde.test.gene.expression.difference(input$`input$GeneVariable`,
models=o.ifm, counts=cd, prior=o.prior)
})
GeneVariable <- reactive({input$GeneVariable})
})
})
# Create Shiny app ----
shinyApp(ui, server)
library(shiny)
#ui.R
library(shiny)
shinyUI(fluidPage(
titlePanel("Shiny App"),
sidebarLayout(
sidebarPanel(h2("Menu"),
mainPanel(h1("Main"),
tabPanel("Differential Expression",
column(6,
p("Input your gene of interest below"),
textInput("input$GeneVariable"), label = h4("Gene of interest"),
value = "Gjb2"),
submitButton("Submit")),
plotOutput("plot2"),
)
)
))
#server.R
shinyServer(function(input, output) {
output$plot2 <- renderPlot({
scde.test.gene.expression.difference(input$`input$GeneVariable`,
models=o.ifm, counts=cd, prior=o.prior)
})
GeneVariable <- reactive({input$GeneVariable})
})
})
# Create Shiny app ----
shinyApp(ui, server)
shiny::runApp('Documents/SDTMinator')
runApp('Documents/SDTMinator')
runApp('Documents/SDTMinator')
runApp('Documents/SDTMinator')
runApp('Documents/SDTMinator')
runApp('Documents/SDTMinator')
runApp('Documents/SDTMinator')
runApp('Documents/SDTMinator')
runApp('Documents/SDTMinator')
runApp('Documents/SDTMinator')
runApp('Documents/SDTM-Scripts/cdisc_Conversion_material/R-Scripts/SDTMinator/tab2.R')
getwd()
library(shiny); runApp('Documents/SDTM-Scripts/cdisc_Conversion_material/R-Scripts/SDTMinator/tab2.R')
getwd()
setwd("~/Documents/SDTMinator/SDTM_Table")
list.dirs(recursive = FALSE)
runApp('~/Documents/SDTM-Scripts/cdisc_Conversion_material/R-Scripts/SDTMinator/tab2.R')
runApp('~/Documents/SDTM-Scripts/cdisc_Conversion_material/R-Scripts/SDTMinator/tab2.R')
runApp('~/Documents/SDTM-Scripts/cdisc_Conversion_material/R-Scripts/SDTMinator/tab2.R')
library(shiny)
library(data.table)
library(ggplot2)
library(DT)
getPrediction <- function(ptest) {
pred <- unlist(strsplit(ptest,";"))
for (i in 1:length(pred)) {
eval(parse(text = pred[i]))
}
p <- eval(parse(text = pred[length(pred)]))
p
}
# Define UI for random distribution app ----
ui <- fluidPage(
# App title ----
titlePanel("Tabsets"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
textAreaInput("caption", "Caption",
'
options(warn = -1)
disease_datasets <- list.dirs(recursive = FALSE)
dt_cm <- data.table(do.call(rbind,lapply(as.list(disease_datasets), function(disease) {
if("CM.txt" %in% list.files(disease)) {
filename_cm <- paste0(disease,"/CM.txt")
tbl_cm <- fread(filename_cm)
dt_per_disease <- tbl_cm[,.(`Number of Subjects` = length(unique(USUBJID))), by = CMTRT]
dt_per_disease$Disease <- disease
return(dt_per_disease)
}
})))
dt_cm$CMTRT <- tolower(dt_cm$CMTRT)
dt_cm$Disease <- gsub("^.\\\\\/(.*)$","\\1",dt_cm$Disease)
p4 <- ggplot() + geom_bar(aes(y = `Number of Subjects`, x = CMTRT, fill = Disease), data = dt_cm,
stat="identity") + theme(axis.text.x = element_text(angle = -90))
p4 +  labs(title="Query: Non-protocol driven medication across studies",
subtitle = "Mapping to a common data model facilitates easier querying across disparate data sources")
',
width = "250px",height = "500px"),
actionButton("actionButton", label = "Submit")
),
# Main panel for displaying outputs ----
mainPanel(
# tags$style(type = 'text/css',
#            "footer{position: absolute; bottom:5%; left: 33%; padding:5px;}"
# ),
# Output: Tabset w/ plot, summary, and table ----
# tabsetPanel(type = "tabs",
#             tabPanel("Plot", plotOutput("plot"))
# )
plotOutput("plot")
)
)
)
# Define server logic for random distribution app ----
server <- function(input, output) {
# Reactive expression to generate the requested distribution ----
# This is called whenever the inputs change. The output functions
# defined below then use the value computed from this expression
h <- eventReactive(input$actionButton,{
req(input$actionButton)
getPrediction(input$caption)
})
# Generate a plot of the data ----
# Also uses the inputs to build the plot label. Note that the
# dependencies on the inputs and the data reactive expression are
# both tracked, and all expressions are called in the sequence
# implied by the dependency graph.
output$plot <- renderPlot({
#d <- as.numeric(lenCaption())
# d
h()
})
}
# Create Shiny app ----
shinyApp(ui, server)
library(shiny)
library(data.table)
library(ggplot2)
library(DT)
library(shinythemes)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server))
getPrediction <- function(ptest) {
pred <- unlist(strsplit(ptest,";"))
for (i in 1:length(pred)) {
eval(parse(text = pred[i]))
}
p <- eval(parse(text = pred[length(pred)]))
p
}
# Define UI for random distribution app ----
ui <- fluidPage(
# App title ----
titlePanel("Tabsets"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
textAreaInput("caption", "Caption",
'
options(warn = -1)
disease_datasets <- list.dirs(recursive = FALSE)
dt_cm <- data.table(do.call(rbind,lapply(as.list(disease_datasets), function(disease) {
if("CM.txt" %in% list.files(disease)) {
filename_cm <- paste0(disease,"/CM.txt")
tbl_cm <- fread(filename_cm)
dt_per_disease <- tbl_cm[,.(`Number of Subjects` = length(unique(USUBJID))), by = CMTRT]
dt_per_disease$Disease <- disease
return(dt_per_disease)
}
})))
dt_cm$CMTRT <- tolower(dt_cm$CMTRT)
dt_cm$Disease <- gsub("^.\\\\\/(.*)$","\\1",dt_cm$Disease)
p4 <- ggplot() + geom_bar(aes(y = `Number of Subjects`, x = CMTRT, fill = Disease), data = dt_cm,
stat="identity") + theme(axis.text.x = element_text(angle = -90))
p4 +  labs(title="Query: Non-protocol driven medication across studies",
subtitle = "Mapping to a common data model facilitates easier querying across disparate data sources")
',
width = "250px",height = "500px"),
actionButton("actionButton", label = "Submit")
),
# Main panel for displaying outputs ----
mainPanel(
# tags$style(type = 'text/css',
#            "footer{position: absolute; bottom:5%; left: 33%; padding:5px;}"
# ),
# Output: Tabset w/ plot, summary, and table ----
# tabsetPanel(type = "tabs",
#             tabPanel("Plot", plotOutput("plot"))
# )
plotOutput("plot")
)
)
)
# Define server logic for random distribution app ----
server <- function(input, output) {
# Reactive expression to generate the requested distribution ----
# This is called whenever the inputs change. The output functions
# defined below then use the value computed from this expression
h <- eventReactive(input$actionButton,{
req(input$actionButton)
getPrediction(input$caption)
})
# Generate a plot of the data ----
# Also uses the inputs to build the plot label. Note that the
# dependencies on the inputs and the data reactive expression are
# both tracked, and all expressions are called in the sequence
# implied by the dependency graph.
output$plot <- renderPlot({
#d <- as.numeric(lenCaption())
# d
h()
})
}
# Create Shiny app ----
shinyApp(ui, server)
getwd
getwd()
library(shiny)
library(data.table)
library(ggplot2)
library(DT)
library(shinythemes)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server))
getPrediction <- function(ptest) {
pred <- unlist(strsplit(ptest,";"))
for (i in 1:length(pred)) {
eval(parse(text = pred[i]))
}
p <- eval(parse(text = pred[length(pred)]))
p
}
# Define UI for random distribution app ----
ui <- fluidPage(
# App title ----
titlePanel("Tabsets"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
textAreaInput("caption", "Caption",
'
options(warn = -1)
disease_datasets <- list.dirs(recursive = FALSE)
dt_cm <- data.table(do.call(rbind,lapply(as.list(disease_datasets), function(disease) {
if("CM.txt" %in% list.files(disease)) {
filename_cm <- paste0(disease,"/CM.txt")
tbl_cm <- fread(filename_cm)
dt_per_disease <- tbl_cm[,.(`Number of Subjects` = length(unique(USUBJID))), by = CMTRT]
dt_per_disease$Disease <- disease
return(dt_per_disease)
}
})))
dt_cm$CMTRT <- tolower(dt_cm$CMTRT)
dt_cm$Disease <- gsub("^.\\\\\/(.*)$","\\1",dt_cm$Disease)
p4 <- ggplot() + geom_bar(aes(y = `Number of Subjects`, x = CMTRT, fill = Disease), data = dt_cm,
stat="identity") + theme(axis.text.x = element_text(angle = -90))
p4 +  labs(title="Query: Non-protocol driven medication across studies",
subtitle = "Mapping to a common data model facilitates easier querying across disparate data sources")
',
width = "250px",height = "500px"),
actionButton("actionButton", label = "Submit")
),
# Main panel for displaying outputs ----
mainPanel(
# tags$style(type = 'text/css',
#            "footer{position: absolute; bottom:5%; left: 33%; padding:5px;}"
# ),
# Output: Tabset w/ plot, summary, and table ----
# tabsetPanel(type = "tabs",
#             tabPanel("Plot", plotOutput("plot"))
# )
plotOutput("plot")
)
)
)
# Define server logic for random distribution app ----
server <- function(input, output) {
# Reactive expression to generate the requested distribution ----
# This is called whenever the inputs change. The output functions
# defined below then use the value computed from this expression
h <- eventReactive(input$actionButton,{
req(input$actionButton)
getPrediction(input$caption)
})
# Generate a plot of the data ----
# Also uses the inputs to build the plot label. Note that the
# dependencies on the inputs and the data reactive expression are
# both tracked, and all expressions are called in the sequence
# implied by the dependency graph.
output$plot <- renderPlot({
#d <- as.numeric(lenCaption())
# d
h()
})
}
# Create Shiny app ----
shinyApp(ui, server)
runApp('~/Desktop/tab2.R')
runApp('~/Documents/SDTMinator/tab2.R')
runApp('~/Documents/SDTMinator/tab2.R')
runApp('~/Documents/SDTMinator/tab2.R')
list.dirs("./SDTM_Table")
getwd()
setwd("/Users/harishdharuri/Documents/SDTMinator/")
list.dirs("./SDTM_Table")
runApp('tab2.R')
runApp('tab2.R')
runApp('tab2.R')
runApp('tab2.R')
runApp('tab2.R')
runApp('tab2.R')
runApp('tab2.R')
runApp('tab2.R')
runApp('tab2.R')
runApp('tab2.R')
runApp('tab2.R')
runApp('tab2.R')
runApp('tab2.R')
runApp('tab2.R')
runApp('tab2.R')
runApp('tab2.R')
runApp('tab2.R')
runApp('tab2.R')
runApp('tab2.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
shinyApp(
ui <- fluidPage(
title = 'Selectize examples',
sidebarLayout(
sidebarPanel(
selectInput(
'e0', '0. An ordinary select input', choices = state.name,
selectize = FALSE
),
selectizeInput(
'e2', '2. Multi-select', choices = state.name, multiple = TRUE
)
),
mainPanel(
helpText('Output of the examples in the left:'),
verbatimTextOutput('ex_out'),
)
)
)
server <- function(input, output) {
output$ex_out <- renderPrint({
str(sapply(sprintf('e%d', 0:7), function(id) {
input[[id]]
}, simplify = FALSE))
})
}
)
library(shiny)
shinyApp(
ui <- fluidPage(
title = 'Selectize examples',
sidebarLayout(
sidebarPanel(
selectInput(
'e0', '0. An ordinary select input', choices = state.name,
selectize = FALSE
),
selectizeInput(
'e2', '2. Multi-select', choices = state.name, multiple = TRUE
)
),
mainPanel(
helpText('Output of the examples in the left:'),
verbatimTextOutput('ex_out'),
)
)
),
server <- function(input, output) {
output$ex_out <- renderPrint({
str(sapply(sprintf('e%d', 0:7), function(id) {
input[[id]]
}, simplify = FALSE))
})
}
)
library(shiny)
shinyApp(
ui <- fluidPage(
title = 'Selectize examples',
sidebarLayout(
sidebarPanel(
selectInput(
'e0', '0. An ordinary select input', choices = state.name,
selectize = FALSE
),
selectizeInput(
'e2', '2. Multi-select', choices = state.name, multiple = TRUE
)
),
mainPanel(
helpText('Output of the examples in the left:'),
verbatimTextOutput('ex_out'),
)
)
),
server <- function(input, output) {
output$ex_out <-
renderPrint({
"I got this one"
# str(sapply(sprintf('e%d', 0:7), function(id) {
#   input[[id]]
# }, simplify = FALSE))
})
}
)
